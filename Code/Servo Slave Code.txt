#include "msp430g2553.h"


unsigned char RX_BUFF, LED1, LED2, STOP;

void main(void)
{
  WDTCTL = WDTPW + WDTHOLD;                 // Halt Watch Dog
  //P1IE |= BIT3;        // enable button interrupt
  //P1IFG &= ~BIT3;       // clear interrupt flag
  P1DIR |= BIT0 + BIT6;      // Set pins for LED1 and LED2 to outputs
  P1OUT &= ~BIT0;       // Set LEDs off
  P1OUT &= ~BIT6;
  P1SEL = BIT1 + BIT2 + BIT4;    // Secondary Peripheral Module function selected
  P1SEL2 = BIT1 + BIT2 + BIT4;

  //////////PULSE FOR SERVO////////////
      P2DIR |= BIT1 + BIT4;
      P2SEL |= BIT1;
      //P2SEL2 |= BIT1;
      P2OUT &= ~BIT4;
      TA1CCR0 = 20000-1;
      TA1CCR1 = 1500;
      TA1CCTL1 = OUTMOD_7;                       // CCR1 reset/set
       TA1CTL   = TASSEL_2 + MC_1;
      ///////////////////////

  UCA0CTL1 = UCSWRST;                       // Reset USCI
  UCA0CTL0 |= UCCKPL + UCMSB + UCSYNC;      // Setting up SPI Slave
  UCA0CTL1 &= ~UCSWRST;                     // Start USCI
  IE2 |= UCA0RXIE;                          // Enable RX interrupt
  TACTL = TASSEL_2 + MC_2+ID_2;                  // SMCLK, cont. mode
  __bis_SR_register(LPM0_bits + GIE);       // Enter LPM0, enable interrupts
}

#pragma vector=USCIAB0RX_VECTOR
__interrupt void USCI0RX_ISR (void)
{
    if(P1IN & BIT5)
    {
        //CCTL0 = 0;      // Turn off Timer A
        //CCR0 = 0;
        //STOP = 0;

        RX_BUFF = UCA0RXBUF;    // Receives which command for the LED to light up

        switch(RX_BUFF)
        {
            case '3':      // This turns on LED1
                P1OUT &= ~BIT6;
                //P1OUT |= BIT0;
                P2OUT &= ~BIT4;
                P1OUT |= BIT0;
                TA1CCR1 = 1000;
            break;

            case '4':      // This turns on LED2
                P1OUT &= ~BIT0;
                P2OUT &= ~BIT4;
                P1OUT |= BIT6;
                TA1CCR1 = 1500;
            break;

            case '5':      // This turns on LED3
                P1OUT &= ~(BIT0+BIT6);
                P2OUT |= BIT4;
                         TA1CCR1 = 2000;
                         break;
            default:
                break;
        }
    }
   // STOP = 1;
}


/*
#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void)
{
 P1IFG &= ~BIT3;   // clear interrupt flag
 if(STOP == 0){
 CCTL0 = CCIE;        // Turn Timer A on
 CCR0 = 60000;
 STOP = 1;
 }
 else{
  CCTL0 = 0;   // Turn Timer A off
  CCR0 = 0;
  STOP = 0;
 }
 P1OUT &= ~BIT0;
}
*/

#pragma vector=TIMER0_A0_VECTOR
__interrupt void Timer_A (void)
{

  P1OUT ^= BIT0;                            // Toggle P1.0
  CCR0 = 60000;                            // Add Offset to CCR0
}

