/*
 HW I/O assignments:
 P1.0    Right Digital IR
 P1.1    BlueSMiRF RX
 P1.2    BlueSMiRF TX
 P1.3    Front Analog IR Sensor
 P1.4    Left Analog IR Sensor
 P1.5    MS CLK
 P1.6    MISO
 P1.7    MOSI
 P2.0    ENB
 P2.1    Right REV (IN3)
 P2.2    Left FWD (IN1)
 P2.3    Left REV (IN2)
 P2.4    Right FWD (IN4)
 P2.5    ENA
 P2.6    GPIO
 P2.7    GPIO
 */

#include  <msp430g2553.h>
#include <stdbool.h>

unsigned char Rx_Data=0;
unsigned int side;
unsigned int direction;
int left[10] = {0};
int left_avg = 0;
int right[10] = {0};
int right_avg = 0;
int front[10] = {0};
int front_avg = 0;
unsigned char SERVO1_Data = '1';
//unsigned char SERVO2_Data = '2';
static char data;
//_Bool exit;
//_Bool man;

void FWD();
void Left();
void Veer_LeftA();
void Veer_LeftB();
void Right();
void Veer_Right();
void REV();
void Stop();
void Send(char * tx_data);
void setSERVO(unsigned char dataOut);
void manual();

void main(void)
{

    /*** Set-up system clocks ***/

    WDTCTL = WDTPW + WDTHOLD;               // Stop WDT

    BCSCTL1 = CALBC1_1MHZ; // Set DCO
    DCOCTL = CALDCO_1MHZ;
    BCSCTL2= DIVS_0 + DIVM_0; // divider=4 for SMCLK and 1 for MCLK


    /*** Set-up GPIO Pins ***/
    P1SEL = BIT1 + BIT2 + BIT5 + BIT6 + BIT7;                    // P1.1 = RXD, P1.2=TXD
    P1SEL2 = BIT1 + BIT2 + BIT5 + BIT6 + BIT7;                   // P1.1 = RXD, P1.2=TXD

    P2OUT = 0x00u;
    P2DIR |= BIT0;  // set P2.0 as output (ENB)
    P2DIR |= BIT1;  // set P2.1 as output (IN3) Right REV
    P2DIR |= BIT2;  // set P2.2 as output (IN1) Left FWD
    P2DIR |= BIT3;  // set P2.3 as output (IN2) Left REV
    P2DIR |= BIT4;  // set P2.4 as output (IN4) Right FWD
    P2DIR |= BIT5;  // set P2.5 as output (ENA)


    P2SEL |= BIT0 + BIT5;       // TA1CCR1 on P2.1
    P2SEL &= ~(BIT0 +BIT5);
    P2SEL &= ~0xC0;

    P2DIR |= BIT6; // Set P2.6 for Slave Select (SS) pin
    P2DIR |= BIT7; // Use to jump RST pin to active

    P2OUT = 0x21u; // Activate ENA + ENB
    P2OUT = BIT7;
    /*** Set-up USCI A ***/
    UCA0CTL0 = 0; //UART mode, No parity, LSB first, 8 data, 1 stop
    UCA0CTL1 |= UCSSEL_2;       // Use SMCLK
    UCA0BR0 = 0x1A; //lower byte of UCBR0. 26dec
                    //(4MHz / 9600 baud)  see table 15-5
    UCA0BR1 = 0;    // 1MHz 9600
    //UCA0MCTL = UCBRS0;        // Modulation UCBRSx = 1
    UCA0MCTL = UCBRF_1 + UCBRS_0 + UCOS16;  //sets UCBRFx to 1,
                                            // UCBRSx to 0 , UCOS16=1
    UCA0CTL1 &= ~UCSWRST;       // SMCLK
    //UCA0BR0 = 104;              // Initialize USCI state machine
    UCB0CTL1 = UCSWRST;
    UCB0CTL0 |= UCCKPL + UCMSB + UCMST + UCSYNC;  // Setting up SPI master
    UCB0CTL1 |= UCSSEL_2;                     // SMCLK
    UCB0BR0 |= 0x02;                          // /2 is prescaler value for clock
    UCB0BR1 = 0;                              //
    UCB0CTL1 &= ~UCSWRST;                     // Initialize USCI
    P2OUT |= BIT6;       // Tell slave to turn on
    UC0IE |= UCA0RXIE; // Enable USCI_A1 RX interrupt

    TA1CCTL0 |= CCIE;           // enable CC interrupts
    TA1CCTL1 |= OUTMOD_7 + CCIE;  // set TACCTL1 to Set / Reset mode//enable CC interrupts
   // TA1CCTL0 &= ~CCIFG;
   // TA1CCTL1 &= ~CCIFG;         //clear capture compare interrupt flag
    IE2 |= UCA0RXIE;            // Enable USCI_A0 RX interrupt
    TA1CTL |= TASSEL_2 + MC_1;
    TA1CCR0 = 7500;
   // TA1CCR1 = 7500;
/*
    // Timer 0 Configuration
    TACTL = MC_0;// Stop the timer
    TACTL = TASSEL_2 + TAIE;// Timer Clock = SMCLK,1MHz/8 = 125KHz,enable TAR interrupt

    CCR0 = 7500; // Count in CCR0 register
    CCR1 = 7500; // Count in CCR1 register
    CCR2 = 7500; // Count in CCR2 register

    CCTL0 |= OUTMOD_4 + CCIE; // Enable CCR0 interrupt
    CCTL1 |= OUTMOD_4 + CCIE; // Enable CCR1 interrupt
    CCTL2 |= OUTMOD_4 + CCIE; // Enable CCR2 interrupt



    TACTL |= MC_1; // Start the timer in continuous mode



    _BIS_SR(LPM0_bits + GIE); // Sleep in LPM0 with interrupts enabled
   // _EINT(); // global enable interrupts */

    side = 0;

    while(1)
    {
       if ( side == 0 )
        {
            ADC10CTL0 = ADC10SHT_2 + MSC + ADC10ON + ADC10IE;    // Sample & Hold Time + ADC10 ON + Interrupt Enable
            ADC10CTL1 = INCH_3 + CONSEQ_2;                         // input A0
            ADC10DTC1 = 0x0A;                                   // 10 conversions
            ADC10AE0 |= BIT3;                           // P1.0 ADC Analog Enable

            ADC10CTL0 &= ~ENC;             // Disable Conversion
            while (ADC10CTL1 & BUSY);       // Wait if ADC10 busy
            ADC10SA = (int)left;             // Transfers data to next array (DTC auto increments address)
            ADC10CTL0 |= ENC + ADC10SC;     // Enable Conversion and conversion start
            __bis_SR_register(CPUOFF + GIE);// Low Power Mode 0, ADC10_ISR

            left_avg = ((left[0]+left[1]+left[2]+left[3]+left[4]+left[5]+left[6]+left[7]+left[8]+left[9])/10);

            side = 1;
        }

        if ( side == 1 )
        {
            ADC10CTL0 = ADC10SHT_2 + MSC + ADC10ON + ADC10IE;    // Sample & Hold Time + ADC10 ON + Interrupt Enable
            ADC10CTL1 = INCH_0 + CONSEQ_2;                         // input A0
            ADC10DTC1 = 0x0A;                                   // 10 conversions
            ADC10AE0 |= BIT0;                           // P1.0 ADC Analog Enable

            ADC10CTL0 &= ~ENC;             // Disable Conversion
            while (ADC10CTL1 & BUSY);       // Wait if ADC10 busy
            ADC10SA = (int)front;             // Transfers data to next array (DTC auto increments address)
            ADC10CTL0 |= ENC + ADC10SC;     // Enable Conversion and conversion start
            __bis_SR_register(CPUOFF + GIE);// Low Power Mode 0, ADC10_ISR

            front_avg = ((front[0]+front[1]+front[2]+front[3]+front[4]+front[5]+front[6]+front[7]+front[8]+front[9])/10);

            side = 2;
        }

        if ( side == 2 )
        {
            ADC10CTL0 = ADC10SHT_2 + MSC + ADC10ON + ADC10IE;    // Sample & Hold Time + ADC10 ON + Interrupt Enable
            ADC10CTL1 = INCH_4 + CONSEQ_2;                         // input A0
            ADC10DTC1 = 0x0A;                                   // 10 conversions
            ADC10AE0 |= BIT4;                           // P1.0 ADC Analog Enable

            ADC10CTL0 &= ~ENC;             // Disable Conversion
            while (ADC10CTL1 & BUSY);       // Wait if ADC10 busy
            ADC10SA = (int)right;             // Transfers data to next array (DTC auto increments address)
            ADC10CTL0 |= ENC + ADC10SC;     // Enable Conversion and conversion start
            __bis_SR_register(CPUOFF + GIE);// Low Power Mode 0, ADC10_ISR

            right_avg = ((right[0]+right[1]+right[2]+right[3]+right[4]+right[5]+right[6]+right[7]+right[8]+right[9])/10);

            side = 0;
        }

        if((left_avg > 300) && (left_avg < 400))//((left_avg > 300) && (front_avg < 300))
            direction = 1;
        else if((left_avg < 300) && (front_avg < 300))//(((left_avg < 300) && (front_avg < 300)) || (right_avg > 100) || ((left_avg < 100) && (front_avg > 300)))
            direction = 2;
        else if(left_avg > 400)
            direction = 3;
        else if(front_avg > 300)//(((left_avg > 200) && (front_avg > 300)) || ((left_avg > 400) && (front_avg < 300)))
            direction = 4;
     //   else
     //       direction = 4;
      /*  if(left_avg > right_avg)//((left_avg > 120) && (left_avg > right_avg))
            direction = 1;

        else if(right_avg > left_avg)//((right_avg > 120) && (right_avg > left_avg))
            direction = 2;
        else if((front_avg > left_avg) && (front_avg > right_avg) && (left_avg > right_avg))// (left_avg > 120) && (left_avg > right_avg))
            direction = 3;
        else if((front_avg > (left_avg && right_avg)) && (right_avg > left_avg))//(right_avg > 120) && (right_avg > left_avg))
            direction = 4;
        else
            direction = 5;*/

        switch(direction)
        {
            case 1:
                FWD();
                break;
            case 2:
                Veer_LeftA();
                //Right();
                //Veer_LeftB();
                break;
            case 3:
                Right();
                break;
            case 4:
                Stop();
                //Right();
                break;
            default:
                Stop();
                break;
        }
    }
}

#pragma vector=USCIAB0RX_VECTOR  // Receive UART interrupt
__interrupt void USCI0RX_ISR(void)
{
    //Rx_Data = UCA0RXBUF; // Assign received byte to Rx_Data
    //__bic_SR_register_on_exit(LPM0_bits);   // Wake-up CPU
    data = UCA0RXBUF;

    switch (data)
               {
                   case '1':
                       Send("SERVO1 \r\n");
                       setSERVO(SERVO1_Data);
                       P2OUT &= ~(BIT0 + BIT5);
                       __delay_cycles(128000000);
                      // exit = 1;
                       //man = 0;
                       break;

                  /* case 'w':
                   case 's':
                   case 'a':
                   case 'd':
                   case 'x':
                       if(man){
                           break;
                       }
                       man = 1;
                       manual();
                       break;
                    */
                   default:
                       Send("Unknown Command \r\n");
                       break;
              }

}



#pragma vector = TIMER1_A0_VECTOR
__interrupt void captureCompareInt1 (void)
{
    P2OUT |= BIT0 + BIT5;                        //Turn on ENABLES
   // P2OUT &= ~(BIT0 + BIT5);
    TA1CCTL0 &= ~CCIFG;                //clear capture compare interrupt flag
}

#pragma vector = TIMER1_A1_VECTOR
__interrupt void captureCompareInt2 (void)
{
    P2OUT &= ~(BIT0 + BIT5);                        //Turn off ENABLES
    TA1CCTL1 &= ~CCIFG;                //clear capture compare interrupt flag
}

/*#pragma vector = TIMER1_A2_VECTOR
__interrupt void captureCompareInt2 (void)
{
    P2OUT &= ~(BIT2);//0 + BIT5);                        //Turn off ENABLES
    TA1CCTL2 &= ~CCIFG;                //clear capture compare interrupt flag
}
*/

// ADC10 interrupt service routine
#pragma vector=ADC10_VECTOR
__interrupt void ADC10_ISR(void)
{
  __bic_SR_register_on_exit(CPUOFF);        // Clear CPUOFF bit from 0(SR)
}

void Right()
{
    P2OUT &= ~(BIT1 + BIT2);    // Stop left and right REV
    P2OUT |= BIT3 + BIT4;       // Enable left and right FWD

    TA1CCR1 = 3500;
}

void Veer_Right()
{
    P2OUT &= ~(BIT3);// + BIT1);    // Stop left and right REV
    P2OUT |= BIT2;       // Enable left and right FWD

   // P2OUT &= ~(BIT1);    // Stop left and right REV
   // __delay_cycles(24000000);
    P2OUT |= BIT4;       // Enable left and right FWD
    TA1CCR1 = 3500;
}

void Left()
{
    P2OUT &= ~(BIT3 + BIT4);    // Stop left and right FWD
    P2OUT |= BIT1 + BIT2;       // Enable left and right REV

    TA1CCR1 = 3500;
}

void Veer_LeftA()
{
    P2OUT &= ~(BIT3 + BIT4);    // Stop left and right FWD
    P2OUT |= BIT1 + BIT2;       // Enable left and right REV
    __delay_cycles(1000000);
    P2OUT &= ~(BIT1 + BIT2);    // Stop left and right REV
    P2OUT |= BIT3 + BIT4;       // Enable left and right FWD
    TA1CCR1 = 2500;

   // P2OUT &= ~(BIT1);// + BIT3);    // Stop left and right REV
   // P2OUT |= BIT4;// + BIT2;       // Enable left and right FWD
   // TA1CCR1 = 3500;


}

void Veer_LeftB()
{
    P2OUT &= ~(BIT3);// + BIT3);    // Stop left and right REV
    P2OUT |= BIT2;       // Enable left and right FWD

   // P2OUT &= ~(BIT3);    // Stop left and right REV
   // __delay_cycles(24000000);
   // P2OUT |= BIT2;       // Enable left and right FWD
    TA1CCR1 = 2500;
}

void FWD()
{
    P2OUT &= ~(BIT1 + BIT3);   // Stop left FWD and right REV
    P2OUT |= BIT2 + BIT4;      // Enable left REV and right FWD

    TA1CCR1 = 3500;
}

void REV()
{
    P2OUT &= ~(BIT2 + BIT4);      // Stop left REV and left FWD
    P2OUT |= BIT1 + BIT3;        // Enable left FWD and right REV

    TA1CCR1 = 3500;
}


void Stop()
{
    P2OUT &= ~(BIT0 + BIT5);     // Stop all movement

    TA1CCR1 = 0;
}

void Send(char * tx_data) // Send Out TX
{
    unsigned int i=0;

    while(tx_data[i]) // Increment
    {
        while ((UCA0STAT & UCBUSY)); // Wait
        UCA0TXBUF = tx_data[i]; // Send out element
        i++;
    }
}

// SPI function for sending data from Master MCU to MCU2 through P.3
void setSERVO(unsigned char dataOut)
{
    P2OUT &= ~BIT6;                // enable slave (CS to Low)
    UCB0TXBUF = 0;                 // Send command
    while (!(IFG2 & UCB0TXIFG));   // wait for TX buffer ready
    UCB0TXBUF = dataOut;           // Send wiper level
    while (!(IFG2 & UCB0TXIFG));   // wait for TX buffer ready
    while (UCB0STAT & UCBUSY);     // wait for the tx to complete
    P2OUT |= BIT6;                 // disable Slave (CS to High)
}
