////////////////////////////////////////
//
//  Tank_Test.c
//
//
//  Created by Jeremiah McCutcheon on 2/11/18.
//
// MSP430 tank control test

/*
 HW I/O assignments:
 P1.0    Front Digital IR
 P1.1    BlueSMiRF RX
 P1.2    BlueSMiRF TX
 P1.3    Left Analog IR Sensor
 P1.4    GPIO
 P1.5    Electromagnet
 P1.6    GPIO
 P1.7    Right IR Sensor
 P2.0    ENB
 P2.1    IN3
 P2.2    IN1
 P2.3    IN2
 P2.4    IN4
 P2.5    ENA
 P2.6    Small Servo
 P2.7    Big Servo
 */

#include  <msp430g2553.h>
#include <stdio.h>

unsigned char Rx_Data=0;
unsigned int side;
int left[10] = {0};
int left_avg = 0;
int right[10] = {0};
int right_avg = 0;

void FWD();
void Left();
void Right();
void veer_Left();
void veer_Right();
void REV();
void Stop();

void main(void){

    /*** Set-up system clocks ***/
    WDTCTL = WDTPW + WDTHOLD;               // Stop WDT
    DCOCTL = 0;
    BCSCTL1 = CALBC1_1MHZ;                  // Set DCO
    DCOCTL = CALDCO_1MHZ;

    /*** Set-up GPIO ***/
    P1SEL = BIT1 + BIT2;                    // P1.1 = RXD, P1.2=TXD
    P1SEL2 = BIT1 + BIT2;                   // P1.1 = RXD, P1.2=TXD


    P2OUT = 0x00u;
    P2DIR |= BIT1;  // set P2.1 as output (IN3) right FWD
    P2DIR |= BIT2;  // set P2.2 as output (IN1) right REV
    P2DIR |= BIT3;  // set P2.3 as output (IN2) left REV
    P2DIR |= BIT4;  // set P2.4 as output (IN4) left FWD
    P2DIR |= BIT0;  // set P2.0 as output (ENB)
    P2DIR |= BIT5;  // set P2.5 as output (ENA)
    P2DIR |= BIT6;  // small servo
    P2DIR |= BIT7;  // big servo
    P2SEL |= BIT0 + BIT5 + BIT6 + BIT7;       // TA1CCR1 on P2.1
    P2SEL &= ~(BIT0 +BIT5 + BIT6 + BIT7);

    P2OUT = 0x21u; // Activate ENA + ENB
    P2OUT &= ~(BIT6);

    /*** Set-up USCI A ***/
    UCA0CTL1 |= UCSSEL_2;       // 1MHz 9600
    UCA0BR1 = 0;                // 1MHz 9600
    UCA0MCTL = UCBRS0;          // Modulation UCBRSx = 1
    UCA0CTL1 &= ~UCSWRST;       // SMCLK
    UCA0BR0 = 104;              // Initialize USCI state machine
    TA1CCR0 = 9999;

    //enable all timers
    TA0CTL |= TASSEL_2|MC_1;           // configure for SMCLK
    TA0CCTL0 |= CCIE;
    TA0CCTL1 |= OUTMOD_7|CCIE;        // set TACCTL1 to Set / Reset mode//enable CC interrupts
    TA0CCTL1 &= ~CCIFG;
    TA0CCR0= 2500;

    TA1CCTL0 |= CCIE;           // enable CC interrupts
    TA1CCTL1 |= OUTMOD_4 + CCIE;  // set TACCTL1 to Set / Reset mode//enable CC interrupts
    TA1CCTL1 &= ~CCIFG;         //clear capture compare interrupt flag
    IE2 |= UCA0RXIE;            // Enable USCI_A0 RX interrupt
    TA1CTL |= TASSEL_2 + MC_1;
    TA1CCR1 = 1400; //Default Positions for Both Servos
    TA0CCR1 =0;


    //__bis_SR_register(GIE);  // interrupts enabled

    //TA1CCTL0 |= ~CCIE;

    side = 0;

    while(1)
    {
        if ( side == 0 )
        {
            ADC10CTL0 = ADC10SHT_2 + MSC + ADC10ON + ADC10IE;    // Sample & Hold Time + ADC10 ON + Interrupt Enable
            ADC10CTL1 = INCH_3 + CONSEQ_2;                         // input A0
            ADC10DTC1 = 0x0A;                                   // 10 conversions
            ADC10AE0 |= BIT3;                           // P1.0 ADC Analog Enable

            ADC10CTL0 &= ~ENC;             // Disable Conversion
            while (ADC10CTL1 & BUSY);       // Wait if ADC10 busy
            ADC10SA = (int)left;             // Transfers data to next array (DTC auto increments address)
            ADC10CTL0 |= ENC + ADC10SC;     // Enable Conversion and conversion start
            __bis_SR_register(CPUOFF + GIE);// Low Power Mode 0, ADC10_ISR

            left_avg = ((left[0]+left[1]+left[2]+left[3]+left[4]+left[5]+left[6]+left[7]+left[8]+left[9])/10);
            
            side = 1;
        }

        if ( side == 1 )
        {
            ADC10CTL0 = ADC10SHT_2 + MSC + ADC10ON + ADC10IE;    // Sample & Hold Time + ADC10 ON + Interrupt Enable
            ADC10CTL1 = INCH_7 + CONSEQ_2;                         // input A0
            ADC10DTC1 = 0x0A;                                   // 10 conversions
            ADC10AE0 |= BIT7;                           // P1.0 ADC Analog Enable

            ADC10CTL0 &= ~ENC;             // Disable Conversion
            while (ADC10CTL1 & BUSY);       // Wait if ADC10 busy
            ADC10SA = (int)right;             // Transfers data to next array (DTC auto increments address)
            ADC10CTL0 |= ENC + ADC10SC;     // Enable Conversion and conversion start
            __bis_SR_register(CPUOFF + GIE);// Low Power Mode 0, ADC10_ISR

            right_avg = ((right[0]+right[1]+right[2]+right[3]+right[4]+right[5]+right[6]+right[7]+right[8]+right[9])/10);

            side = 0;
        }

        if((left_avg > 0) && (left_avg < 300))
            direction = 1;
        else if((right_avg > 0) && (right_avg < 300))
            direction = 2;
        else
            direction = 3;

        switch(direction)
        {
            case 1:
                Right();
                break;
            case 2:
                Left();
                break;
            case 3:
                FWD();
                break;
            default:
                break;

        }
    }
}

void Left()
{

    /*
    P2.1    IN3
    P2.2    IN1
    P2.3    IN2
    P2.4    IN4
    */
    P2OUT &= ~(BIT1 + BIT2);    // Stop left and right REV
    P2OUT |= BIT3 + BIT4;       // Enable left and right FWD

    TA1CCR1 = 2500;

}

void veer_Left()
{
    P2OUT &= ~(BIT2 + BIT4);    // Stop left and right REV
    P2OUT |= BIT1 + BIT3;       // Enable left and right FWD

    TA1CCR1 = 3500;
    TA1CCR2 = 2000;
}

void Right()
{
    P2OUT &= ~(BIT3 + BIT4);    // Stop left and right FWD
    P2OUT |= BIT1 + BIT2;       // Enable left and right REV

    TA1CCR1 = 2500;
}

void veer_Right()
{
    P2OUT &= ~(BIT2 + BIT4);    // Stop left and right FWD
    P2OUT |= BIT1 + BIT3;       // Enable left and right REV

    TA1CCR1 = 2000;
    TA1CCR2 = 3500;
}


void FWD()
{
    P2OUT &= ~(BIT1 + BIT3);   // Stop left FWD and right REV
    P2OUT |= BIT2 + BIT4;      // Enable left REV and right FWD

    TA1CCR1 = 2500;
}

void REV()
{
    P2OUT &= ~(BIT2 + BIT4);      // Stop left REV and left FWD
    P2OUT |= BIT1 + BIT3;        // Enable left FWD and right REV

    TA1CCR1 = 2500;
}


void Stop()
{
    P2OUT &= ~(BIT1 + BIT2 + BIT3 + BIT4);      // Stop all movement

    TA1CCR1 = 0;
}

#pragma vector=USCIAB0RX_VECTOR  // Receive UART interrupt
__interrupt void USCI0RX_ISR(void)
{
    Rx_Data = UCA0RXBUF; // Assign received byte to Rx_Data
    __bic_SR_register_on_exit(LPM0_bits);   // Wake-up CPU
}



#pragma vector = TIMER1_A0_VECTOR
__interrupt void captureCompareInt1 (void)
{
    P2OUT |= BIT0 + BIT5;                        //Turn on ENABLES
    TA1CCTL0 &= ~CCIFG;                //clear capture compare interrupt flag
}

#pragma vector = TIMER1_A1_VECTOR
__interrupt void captureCompareInt2 (void)
{
    P2OUT &= ~(BIT0 + BIT5);                        //Turn off ENABLES
    TA1CCTL1 &= ~CCIFG;                //clear capture compare interrupt flag
}

// ADC10 interrupt service routine
#pragma vector=ADC10_VECTOR
__interrupt void ADC10_ISR(void)
{
  __bic_SR_register_on_exit(CPUOFF);        // Clear CPUOFF bit from 0(SR)
}
