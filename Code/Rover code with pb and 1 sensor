//
//  Tank_Test.c
//
//
//  Created by Jeremiah McCutcheon on 2/11/18.
//
// MSP430 tank control test

/*

 HW I/O assignments:
 P1.0    not used
 P1.1    not used
 P1.2    not used
 P1.3    PUSHBUTTON  // used for testing
 P1.4    not used
 P1.5    not used
 P1.6    not used
 P1.7    not used

 P2.0    ENA
 P2.1    IN1
 P2.2    IN2
 P2.3    IN3
 P2.4    IN4
 P2.5    EN5
 P2.6    not used
 P2.7    not used

 */

#include  <msp430g2553.h>

unsigned int button = 0;
unsigned int lftIR = 0;
unsigned int rtIR = 0;

void FWD();

void main(void){

    WDTCTL = WDTPW + WDTHOLD; // Stop Watchdog Timer

    //P1SEL |= ~(BIT5 + BIT6);

    //P1OUT =  BIT3;      // Pullup for BIT3
    //P1REN |= BIT3;      // Resistor BIT0ble for BIT3 position
    P1IE |=  BIT6;// + BIT7;      // BIT3 interrupt BIT0bled
    P1IES |= BIT6;// + BIT7;      // BIT3 Hi/lo edge
    P1IFG &= ~0xFF; // clear ALL the Interrupt Flags on Port 1

    P2OUT = 0x00u;

    P2DIR |= BIT0;   // setup output port BIT0ble A
    P2DIR |= BIT5;  // setup output port BIT0ble B
    P2DIR |= BIT1;   // setup output port rt forward
    P2DIR |= BIT2;   // setup output port rt reverse
    P2DIR |= BIT3;    // setup output port left reverse
    P2DIR |= BIT4;   // setup output port left forward

    _BIS_SR(GIE);   // BIT0ble general interrupts

    //P2OUT ^= BIT0;   // Turn on Right Track
    //P2OUT ^= BIT5;  // Turn on Left Track

    while(1){
            if(button == 1){
                P2OUT ^= BIT0;   // Turn on Right Track
                P2OUT ^= BIT5;  // Turn on Left Track
                FWD();
            }
            else
                P2OUT ^= BIT0;   // Turn on Right Track
                P2OUT ^= BIT5;  // Turn on Left Track
                REV();
        }

    }

    // Port 1 interrupt service routine
    #pragma vector=PORT1_VECTOR
    __interrupt void Port_1(void)
    {
        button ^= 1;
        P1IFG &= ~0xFF;  // clear ALL the Interrupt Flag bits on Port 1
    }




void FWD(){

    P2OUT ^= BIT1;      // rt forw
    P2OUT ^= BIT4;      // lft forw
    __delay_cycles(1500);

    P2OUT ^= BIT1;      // rt forw
    P2OUT ^= BIT4;  // lft forw
    __delay_cycles(500);
}

void REV(){
    //P2OUT ^= BIT0;   // Turn on Right Track
    //P2OUT ^= BIT5;  // Turn on Left Track
    P2OUT ^= BIT2;  // rt rev
    P2OUT ^= BIT3;  // lft rev
    __delay_cycles(1500);

    //P2OUT ^= BIT0;   // Turn on Right Track
    //P2OUT ^= BIT5;  // Turn on Left Track
    P2OUT ^= BIT2;  // rt rev
    P2OUT ^= BIT3;  // lft rev
    __delay_cycles(500);
}

/*
void Left(){
    P1OUT ^= BIT1;  // rt forw
    P2OUT ^= BIT3;  // lft rev
    __delay_cycles(18);
    P1OUT ^= BIT1;  // rt forw
    P2OUT ^= BIT3;  // lft rev
    __delay_cycles(2);
}

void Right(){
    P2OUT ^= BIT2;  // rt rev
    P2OUT ^= BIT4;  // lft forw
    __delay_cycles(18);
    P2OUT ^= BIT2;  // rt rev
    P2OUT ^= BIT4;  // lft forw
    __delay_cycles(2);
}
*/
